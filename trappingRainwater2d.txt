
[[9,9,9,9,9,9,8,9,9,9,9],
 [9,0,0,0,0,0,1,0,0,0,9],
 [9,0,0,0,0,0,0,0,0,0,9],
 [9,0,0,0,0,0,0,0,0,0,9],
 [9,9,9,9,9,9,9,9,9,9,9]]


200000






200000	200000	200000	200000	200000	200000	200000	200000	200000	200000	200000	
200000	9	9	9	9	8	8	8	8	8	200000	
200000	9	9	9	9	8	8	8	8	8	200000	
200000	9	9	9	9	8	8	8	8	8	200000	
200000	200000	200000	200000	200000	200000	200000	200000	200000	200000	200000	





[[78,16,94,36],
 [87,93,50,22],
 [63,28,91,60],
 [64,27,41,27],
 [73,37,12,69],
 [68,30,83,31],
 [63,24,68,36]]



200000	200000	200000	200000	
200000	200000	200000	200000	
200000	37	200000	200000	
200000	37	200000	200000	
200000	200000	69	200000	
200000	200000	200000	200000	
200000	200000	200000	200000




[[5,8,7,7],
 [5,2,1,5],
 [7,1,7,1],
 [8,9,6,9],
 [9,8,9,9]]

200000	200000	200000	200000	
200000	5	5	200000	
200000	5	5	200000	
200000	200000	5	200000	
200000	200000	200000	200000	


[[14,17,18,16,14,16],
 [17,3 ,10,2 ,3 ,8],
 [11,10,4 ,7 ,1 ,7],
 [13,7 ,2 ,9 ,8 ,10],
 [13,1 ,3 ,4 ,8 ,6],
 [20,3 ,3 ,9 ,10,8]]

200000	200000	200000	200000	200000	200000	
200000	10	200000	7	7	200000	
200000	10	200000	7	7	200000	
200000	200000	3	200000	7	200000	
200000	3	3	3	200000	200000	
200000	200000	200000	200000	200000	200000	



[[14,20,11,19,19,16],
 [11,10,7,4,9,6],
 [17,2,2,6,10,9],
 [15,9,2,1,4,1],
 [15,5,5,5,8,7],
 [14,2,8,6,10,7]]

200000
200000	200000	200000	200000	200000	200000	
200000	200000	8	6	200000	200000	
200000	9	8	200000	200000	200000	
200000	200000	4	4	200000	200000	
200000	200000	8	6	200000	200000	
200000	200000	200000	200000	200000	200000	

200000	200000	200000	200000	200000	200000	
200000	200000	4	4	200000	200000	
200000	4	4	200000	200000	200000	
200000	200000	4	4	200000	200000	
200000	200000	4	4	200000	200000	
200000	200000	200000	200000	200000	200000	




[[19383,10886,12777,16915,17793,18335,15386,10492,16649,11421],
[12362,27,8690,59,7763,3926,540,3426,9172,5736],
[15211,5368,2567,6429,5782,1530,2862,5123,4067,3135],
[13929,9802,4022,3058,3069,8167,1393,8456,5011,8042],
[16229,7373,4421,4919,3784,8537,5198,4324,8315,4370],
[16413,3526,6091,8980,9956,1873,6862,9170,6996,7281],
[12305,925,7084,6327,336,6505,846,1729,1313,5857],
[16124,3895,9582,545,8814,3367,5434,364,4043,3750],
[11087,6808,7276,7178,5788,3584,5403,2651,2754,2399],
[19932,5060,9676,3368,7739,12,6226,8586,8094,7539]]




class Solution {
public:
    int trapRainWater(vector<vector<int>> &heightMap) {
        
        int temp;
        int n = heightMap.size();
        if (n <= 2)
            return 0;
        int m = heightMap[0].size();
        //cout << m;
        if (m <= 2 && n <= 2)
            return 0;
        
        int upMax[n][m];
        for (int j = 0; j < m; j++)
        {
            temp = heightMap[0][j];
            for (int i = 0; i < n; i++)
            {
                    temp = max (heightMap[i][j], temp);
                    upMax[i][j] = temp;
            }
        }
        
        int leftMax[n][m];
        for (int i = 0; i < n; i++)
        {
            temp = heightMap[i][0];
            for (int j = 0; j < m; j++)
            {
                    temp = max (heightMap[i][j], temp);
                    leftMax[i][j] = temp;
            }
        }
        
        int rightMax[n][m];
        for (int i = 0; i < n; i++)
        {
            temp = heightMap[i][m - 1];
            for (int j = m - 1; j >= 0; j--)
            {
                    temp = max (heightMap[i][j], temp);
                    rightMax[i][j] = temp;
            }
        }
        
        int downMax[n][m];
        for (int j = 0; j < m; j++)
        {
            temp = heightMap[n - 1][j];
            for (int i = n - 1; i >= 0; i--)
            {
                    temp = max (heightMap[i][j], temp);
                    downMax[i][j] = temp;
            }
        }
        
        /*
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
                cout << leftMax[i][j] << "\t";
            cout << "\n";
        }
        cout << "\n";
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
                cout << upMax[i][j] << "\t";
            cout << "\n";
        }
        cout << "\n";*/
       /* for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
                cout << downMax[i][j] << "\t";
            cout << "\n";
        }
        cout << "\n";*/
        /*for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
                cout << rightMax[i][j] << "\t";
            cout << "\n";
        }
        cout << "\n";*/
        int path[n][m];
        int value[n][m];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
            {
                path[i][j] = 200000;
                value[i][j] = 200000;
            }
        cout << path[0][0];
        cout << "\n";
        int water = 0;
        for (int i = 1; i < n - 1; i++)
            for (int j = 1; j < m - 1; j++)
            {
                temp = min (leftMax[i][j], min (rightMax[i][j], min (upMax[i][j], downMax[i][j])));
                value[i][j] = temp;
                 if (temp > heightMap[i][j])
                 {
                     path[i][j] = temp;
                     /*cout << i << " " << j << " " << temp << "\n";
                     water += temp - heightMap[i][j];*/
                 }
            }
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                cout << path[i][j] << "\t";
               /* if (path[i][j] != 200000)
                    water += path[i][j] - heightMap[i][j];*/
            }
            cout << "\n";
        }
        cout << "\n";
        int great = (m > n ? m : n);
        while (great--)
        {   
            for (int i = 1; i < n - 1; i++)
            {
                for (int j = 1; j < m - 1; j++)
                {
                    if (path[i][j] != -1)
                    {
                        int tempVar = min (path[i][j], min (path[i - 1][j], min (path[i][j - 1], min (path[i + 1][j], path[i][j + 1]))));
                        if (tempVar > heightMap[i][j])
                            path[i][j] = tempVar;
                        else 
                            path[i][j] = 200000;
                        //cout << path[i][j] << "\t";
                        //water += path[i][j] - heightMap[i][j];
                    }
                   /* else if (heightMap[i][j] == path[i - 1][j])
                        path[i][j] = path[i - 1][j];
                    else if (heightMap[i][j] == path[i + 1][j])
                        path[i][j] = path[i + 1][j];
                    else if (heightMap[i][j] == path[i][j + 1])
                        path[i][j] = path[i][j + 1];
                    else if (heightMap[i][j] == path[i][j + 1])
                        path[i][j] = path[i][j - 1];*/
                   else
                    {
                        int temp = min (path[i - 1][j], min (path[i + 1][j], min (path[i][j + 1], path[i][j + 1])));
                        if (heightMap[i][j] == temp && value[i][j] <= temp)
                            path[i][j] = temp;
                    }
                        
                }
            }
        }
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                cout << path[i][j] << "\t";
                if (path[i][j] != 200000)
                {
                    int tempVar1 = path[i][j] - heightMap[i][j];
                    //if (tempVar1 >= 0)
                        water += tempVar1;
                }

            }
            cout << "\n";
        }
        return water;
    }
};
